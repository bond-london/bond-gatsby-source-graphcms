{"version":3,"sources":["src/gatsby-node.js"],"names":["pluginOptionsSchema","Joi","object","buildMarkdownNodes","boolean","description","default","downloadLocalImages","downloadAllAssets","endpoint","string","required","fragmentsPath","locales","array","items","min","stages","token","typePrefix","createSourcingConfig","gatsbyApi","defaultStage","length","execute","operationName","query","variables","reporter","method","body","JSON","stringify","headers","Authorization","then","response","ok","panic","Error","statusText","json","errors","catch","error","schema","nodeInterface","getType","queryFields","getFields","possibleTypes","getPossibleTypes","singularRootFieldName","type","Object","keys","find","fieldName","pluralRootFieldName","String","name","hasLocaleField","locale","gatsbyNodeTypes","map","remoteTypeName","queries","stage","join","nodeQueryVariables","id","where","fragmentsDir","process","cwd","fs","existsSync","mkdirSync","addSystemFieldArguments","field","includes","variation","fragments","defaultArgumentValues","documents","customFragments","concurrency","gatsbyTypePrefix","gatsbyNodeDefs","sourceNodes","pluginOptions","webhookBody","config","operation","data","nodeEvent","__typename","eventName","remoteId","localizations","nodeEvents","onCreateNode","node","actions","createNode","createNodeId","getCache","mimeType","fileNode","url","parentNodeId","fileName","ext","path","extname","localFile","e","console","fields","entries","key","value","filter","forEach","decodedMarkdown","he","decode","markdown","markdownNode","parent","internal","mediaType","content","contentDigest","crypto","createHash","update","digest","createSchemaCustomization","createTypes","generateImageSource","baseURL","width","height","format","fit","quality","src","resolveGatsbyImageData","handle","filename","options","imageDataArgs","pluginName","sourceMetadata","split","createResolvers","typeName","gatsbyImageData"],"mappings":"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","sourcesContent":["import crypto from \"crypto\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport {\r\n  wrapQueryExecutorWithQueue,\r\n  loadSchema,\r\n  readOrGenerateDefaultFragments,\r\n  compileNodeQueries,\r\n  buildNodeDefinitions,\r\n  createSchemaCustomization as createToolkitSchemaCustomization,\r\n  sourceAllNodes,\r\n  sourceNodeChanges,\r\n} from \"gatsby-graphql-source-toolkit\";\r\nimport { generateImageData } from \"gatsby-plugin-image\";\r\nimport { getGatsbyImageResolver } from \"gatsby-plugin-image/graphql-utils\";\r\nimport { createRemoteFileNode } from \"gatsby-source-filesystem\";\r\nimport he from \"he\";\r\nimport fetch from \"node-fetch\";\r\n\r\nexport function pluginOptionsSchema({ Joi }) {\r\n  return Joi.object({\r\n    buildMarkdownNodes: Joi.boolean()\r\n      .description(\r\n        `Build markdown nodes for all [RichText](https://graphcms.com/docs/reference/fields/rich-text) fields in your GraphCMS schema`\r\n      )\r\n      .default(false),\r\n    downloadLocalImages: Joi.boolean()\r\n      .description(\r\n        `Download and cache GraphCMS image assets in your Gatsby project`\r\n      )\r\n      .default(false),\r\n    downloadAllAssets: Joi.boolean()\r\n      .description(\r\n        `Download and cache all GraphCMS assets in your Gatsby project`\r\n      )\r\n      .default(false),\r\n    endpoint: Joi.string()\r\n      .description(\r\n        `The endpoint URL for the GraphCMS project. This can be found in the [project settings UI](https://graphcms.com/docs/guides/concepts/apis#working-with-apis)`\r\n      )\r\n      .required(),\r\n    fragmentsPath: Joi.string()\r\n      .description(\r\n        `The local project path where generated query fragments are saved. This is relative to your current working directory. If using multiple instances of the source plugin, you **must** provide a value here to prevent type and/or fragment conflicts.`\r\n      )\r\n      .default(`graphcms-fragments`),\r\n    locales: Joi.array()\r\n      .description(\r\n        `An array of locale key strings from your GraphCMS project. You can read more about working with localisation in GraphCMS [here](https://graphcms.com/docs/guides/concepts/i18n).`\r\n      )\r\n      .items(Joi.string())\r\n      .min(1)\r\n      .default([\"en\"]),\r\n    stages: Joi.array()\r\n      .description(\r\n        `An array of Content Stages from your GraphCMS project. You can read more about using Content Stages [here](https://graphcms.com/guides/working-with-content-stages).`\r\n      )\r\n      .items(Joi.string())\r\n      .min(1)\r\n      .default([\"PUBLISHED\"]),\r\n    token: Joi.string().description(\r\n      `If your GraphCMS project is **not** publicly accessible, you will need to provide a [Permanent Auth Token](https://graphcms.com/docs/reference/authorization) to correctly authorize with the API. You can learn more about creating and managing API tokens [here](https://graphcms.com/docs/guides/concepts/apis#working-with-apis)`\r\n    ),\r\n    typePrefix: Joi.string()\r\n      .description(\r\n        `The string by which every generated type name is prefixed with. For example, a type of Post in GraphCMS would become GraphCMS_Post by default. If using multiple instances of the source plugin, you **must** provide a value here to prevent type conflicts`\r\n      )\r\n      .default(`GraphCMS_`),\r\n  });\r\n}\r\n\r\nconst createSourcingConfig = async (\r\n  gatsbyApi,\r\n  { endpoint, fragmentsPath, locales, stages, token, typePrefix }\r\n) => {\r\n  const defaultStage = stages && stages.length && stages[0];\r\n\r\n  const execute = async ({ operationName, query, variables = {} }) => {\r\n    const { reporter } = gatsbyApi;\r\n\r\n    return await fetch(endpoint, {\r\n      method: \"POST\",\r\n      body: JSON.stringify({ query, variables, operationName }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        ...(defaultStage && { \"gcms-stage\": defaultStage }),\r\n        ...(token && { Authorization: `Bearer ${token}` }),\r\n      },\r\n    })\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          return reporter.panic(\r\n            `gatsby-source-graphcms: Problem building GraphCMS nodes`,\r\n            new Error(response.statusText)\r\n          );\r\n        }\r\n\r\n        return response.json();\r\n      })\r\n      .then((response) => {\r\n        if (response.errors) {\r\n          return reporter.panic(\r\n            `gatsby-source-graphcms: Problem building GraphCMS nodes`,\r\n            new Error(response.errors)\r\n          );\r\n        }\r\n\r\n        return response;\r\n      })\r\n      .catch((error) => {\r\n        return reporter.panic(\r\n          `gatsby-source-graphcms: Problem building GraphCMS nodes`,\r\n          new Error(error)\r\n        );\r\n      });\r\n  };\r\n  const schema = await loadSchema(execute);\r\n\r\n  const nodeInterface = schema.getType(\"Node\");\r\n  const query = schema.getType(\"Query\");\r\n  const queryFields = query.getFields();\r\n  const possibleTypes = schema.getPossibleTypes(nodeInterface);\r\n\r\n  const singularRootFieldName = (type) =>\r\n    Object.keys(queryFields).find(\r\n      (fieldName) => queryFields[fieldName].type === type\r\n    );\r\n\r\n  const pluralRootFieldName = (type) =>\r\n    Object.keys(queryFields).find(\r\n      (fieldName) => String(queryFields[fieldName].type) === `[${type.name}!]!`\r\n    );\r\n\r\n  const hasLocaleField = (type) => type.getFields().locale;\r\n\r\n  const gatsbyNodeTypes = possibleTypes.map((type) => ({\r\n    remoteTypeName: type.name,\r\n    queries: [\r\n      ...locales.map((locale) =>\r\n        stages.map(\r\n          (stage) => `\r\n          query LIST_${pluralRootFieldName(\r\n            type\r\n          )}_${locale}_${stage} { ${pluralRootFieldName(type)}(first: $limit, ${\r\n            hasLocaleField(type) ? `locales: [${locale}]` : \"\"\r\n          }, skip: $offset, stage: ${stage}) {\r\n              ..._${type.name}Id_\r\n            }\r\n          }`\r\n        )\r\n      ),\r\n      `query NODE_${singularRootFieldName(type)}{ ${singularRootFieldName(\r\n        type\r\n      )}(where: $where, ${hasLocaleField(type) ? `locales: $locales` : \"\"}) {\r\n        ..._${type.name}Id_\r\n        }\r\n      }\r\n      fragment _${type.name}Id_ on ${type.name} {\r\n        __typename\r\n        id\r\n        ${hasLocaleField(type) ? `locale` : \"\"}\r\n        stage\r\n      }`,\r\n    ].join(\"\\n\"),\r\n    nodeQueryVariables: ({ id, locale, stage }) => ({\r\n      where: { id },\r\n      locales: [locale],\r\n      stage,\r\n    }),\r\n  }));\r\n\r\n  const fragmentsDir = `${process.cwd()}/${fragmentsPath}`;\r\n\r\n  if (!fs.existsSync(fragmentsDir)) fs.mkdirSync(fragmentsDir);\r\n\r\n  const addSystemFieldArguments = (field) => {\r\n    if ([\"createdAt\", \"publishedAt\", \"updatedAt\"].includes(field.name))\r\n      return { variation: `COMBINED` };\r\n  };\r\n\r\n  const fragments = await readOrGenerateDefaultFragments(fragmentsDir, {\r\n    schema,\r\n    gatsbyNodeTypes,\r\n    defaultArgumentValues: [addSystemFieldArguments],\r\n  });\r\n\r\n  const documents = compileNodeQueries({\r\n    schema,\r\n    gatsbyNodeTypes,\r\n    customFragments: fragments,\r\n  });\r\n\r\n  return {\r\n    gatsbyApi,\r\n    schema,\r\n    execute: wrapQueryExecutorWithQueue(execute, { concurrency: 10 }),\r\n    gatsbyTypePrefix: typePrefix,\r\n    gatsbyNodeDefs: buildNodeDefinitions({ gatsbyNodeTypes, documents }),\r\n  };\r\n};\r\n\r\nexport async function sourceNodes(gatsbyApi, pluginOptions) {\r\n  const { webhookBody } = gatsbyApi;\r\n\r\n  const config = await createSourcingConfig(gatsbyApi, pluginOptions);\r\n\r\n  await createToolkitSchemaCustomization(config);\r\n\r\n  if (webhookBody && Object.keys(webhookBody).length) {\r\n    const { operation, data } = webhookBody;\r\n\r\n    const nodeEvent = (operation, { __typename, locale, id }) => {\r\n      switch (operation) {\r\n        case \"delete\":\r\n        case \"unpublish\":\r\n          return {\r\n            eventName: \"DELETE\",\r\n            remoteTypeName: __typename,\r\n            remoteId: { __typename, locale, id },\r\n          };\r\n        case \"create\":\r\n        case \"publish\":\r\n        case \"update\":\r\n          return {\r\n            eventName: \"UPDATE\",\r\n            remoteTypeName: __typename,\r\n            remoteId: { __typename, locale, id },\r\n          };\r\n      }\r\n    };\r\n\r\n    const { localizations = [{ locale: \"en\" }] } = data;\r\n\r\n    await sourceNodeChanges(config, {\r\n      nodeEvents: localizations.map(({ locale }) =>\r\n        nodeEvent(operation, { locale, ...data })\r\n      ),\r\n    });\r\n  } else {\r\n    await sourceAllNodes(config);\r\n  }\r\n}\r\n\r\nexport async function onCreateNode(\r\n  { node, actions: { createNode }, createNodeId, getCache },\r\n  {\r\n    buildMarkdownNodes = false,\r\n    downloadLocalImages = false,\r\n    downloadAllAssets = false,\r\n    typePrefix = \"GraphCMS_\",\r\n  }\r\n) {\r\n  if (\r\n    node.remoteTypeName === \"Asset\" &&\r\n    (downloadAllAssets ||\r\n      (downloadLocalImages && node.mimeType.includes(\"image/\")))\r\n  ) {\r\n    try {\r\n      const fileNode = await createRemoteFileNode({\r\n        url: node.url,\r\n        parentNodeId: node.id,\r\n        createNode,\r\n        createNodeId,\r\n        getCache,\r\n        ...(node.fileName && {\r\n          name: node.fileName,\r\n          ext: path.extname(node.fileName),\r\n        }),\r\n      });\r\n\r\n      if (fileNode) node.localFile = fileNode.id;\r\n    } catch (e) {\r\n      console.error(\"gatsby-source-graphcms:\", e);\r\n    }\r\n  }\r\n\r\n  if (buildMarkdownNodes) {\r\n    const fields = Object.entries(node)\r\n      .map(([key, value]) => ({ key, value }))\r\n      .filter(\r\n        ({ value }) =>\r\n          value && value.remoteTypeName && value.remoteTypeName === \"RichText\"\r\n      );\r\n\r\n    if (fields.length) {\r\n      fields.forEach((field) => {\r\n        const decodedMarkdown = he.decode(field.value.markdown);\r\n\r\n        const markdownNode = {\r\n          id: `MarkdownNode:${createNodeId(`${node.id}-${field.key}`)}`,\r\n          parent: node.id,\r\n          internal: {\r\n            type: `${typePrefix}MarkdownNode`,\r\n            mediaType: \"text/markdown\",\r\n            content: decodedMarkdown,\r\n            contentDigest: crypto\r\n              .createHash(`md5`)\r\n              .update(decodedMarkdown)\r\n              .digest(`hex`),\r\n          },\r\n        };\r\n\r\n        createNode(markdownNode);\r\n\r\n        field.value.markdownNode = markdownNode.id;\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport function createSchemaCustomization(\r\n  { actions: { createTypes } },\r\n  {\r\n    buildMarkdownNodes = false,\r\n    downloadLocalImages = false,\r\n    downloadAllAssets = false,\r\n    typePrefix = \"GraphCMS_\",\r\n  }\r\n) {\r\n  if (downloadLocalImages || downloadAllAssets)\r\n    createTypes(`\r\n      type ${typePrefix}Asset {\r\n        localFile: File @link\r\n      }\r\n    `);\r\n\r\n  if (buildMarkdownNodes)\r\n    createTypes(`\r\n      type ${typePrefix}MarkdownNode implements Node {\r\n        id: ID!\r\n      }\r\n      type ${typePrefix}RichText {\r\n        markdownNode: ${typePrefix}MarkdownNode @link\r\n      }\r\n    `);\r\n}\r\n\r\nconst generateImageSource = (\r\n  baseURL,\r\n  width,\r\n  height,\r\n  format,\r\n  fit = \"clip\",\r\n  { quality = 100 }\r\n) => {\r\n  const src = `https://media.graphcms.com/resize=width:${width},height:${height},fit:${fit}/output=quality:${quality}/${baseURL}`;\r\n\r\n  return { src, width, height, format };\r\n};\r\n\r\nconst resolveGatsbyImageData = async (\r\n  { handle: filename, height, mimeType, width },\r\n  options\r\n) => {\r\n  const imageDataArgs = {\r\n    ...options,\r\n    pluginName: `gatsby-source-graphcms`,\r\n    sourceMetadata: { format: mimeType.split(\"/\")[1], height, width },\r\n    filename,\r\n    generateImageSource,\r\n    options,\r\n  };\r\n\r\n  return generateImageData(imageDataArgs);\r\n};\r\n\r\nexport function createResolvers(\r\n  { createResolvers },\r\n  { typePrefix = \"GraphCMS_\" }\r\n) {\r\n  const typeName = `${typePrefix}Asset`;\r\n\r\n  createResolvers({\r\n    [typeName]: {\r\n      gatsbyImageData: getGatsbyImageResolver(resolveGatsbyImageData, {\r\n        quality: {\r\n          type: \"Int\",\r\n          description:\r\n            \"The default image quality generated. This is overridden by any format-specific options.\",\r\n        },\r\n      }),\r\n    },\r\n  });\r\n}\r\n"],"file":"gatsby-node.js"}